/* A 41 - COMUNICAÇÃO ENTRE BANCOS */

CREATE DATABASE LOJA;
USE LOJA;

CREATE TABLE PRODUTO (
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30),
	VALOR FLOAT (10, 2)
);

CREATE DATABASE BACKUP;
USE BACKUP;

CREATE TABLE BKP_PRODUTO (
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR (30),
	VALOR FLOAT (10, 2)
);

USE LOJA;

INSERT INTO BACKUP.BKP_PRODUTO VALUES (NULL, 1000, 'TESTE', 0.0);

SELECT * FROM BACKUP.BKP_PRODUTO;

/* CRIANDO UM BACKUP COM TRIGGER APOS DE INSERIR
DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES (NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);
END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES (NULL, 'LIVRO MODELAGEM', 50.00);
INSERT INTO PRODUTO VALUES (NULL, 'LIVRO BI', 80.00);
INSERT INTO PRODUTO VALUES (NULL, 'LIVRO ORACLE', 70.00);
INSERT INTO PRODUTO VALUES (NULL, 'LIVRO SQL SERVER', 100.00);

INSERT INTO PRODUTO VALUES (NULL, 'LIVRO C#', 150.00);

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

/* CRIANDO BACKUP COM TRIGGER ANTES DE DELETAR
DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES (NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, 'D');
END
$

DELIMITER ;

DELETE FROM PRODUTO WHERE IDPRODUTO = 4;

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

/***********************
/* A 42 - TRIGGER DE AUDITORIA

CREATE DATABASE LOJA2;
USE LOJA2;

CREATE TABLE PRODUTO (
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30),
	VALOR FLOAT (10, 2)
);

INSERT INTO PRODUTO VALUES (NULL, 'LIVRO MODELAGEM', 50.00);
INSERT INTO PRODUTO VALUES (NULL, 'LIVRO BI', 80.00);
INSERT INTO PRODUTO VALUES (NULL, 'LIVRO ORACLE', 70.00);
INSERT INTO PRODUTO VALUES (NULL, 'LIVRO SQL SERVER', 100.00);

CREATE DATABASE BACKUP2;
USE BACKUP2;

CREATE TABLE BKP_PRODUTO (
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR (30),
	VALOR_ORIGINAL FLOAT (10, 2),
	VALOR_ALTERADO FLOAT (10, 2),
	DATA DATETIME,
	USUARIO VARCHAR (30),
	EVENTO CHAR (1)
);

USE LOJA2;

/* QUANDO
SELECT NOW();
/* QUEM
SELECT CURRENT_USER();

/* CRIANDO A TRIGGER */
DELIMITER $
CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP2.BKP_PRODUTO VALUES (NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, NEW.VALOR, NOW(), CURRENT_USER(), 'U');

END
$

DELIMITER ;

UPDATE PRODUTO SET VALOR = 150.00
WHERE IDPRODUTO = 4;

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP2.BKP_PRODUTO;

/********************
/* A 44 - AUTO RELACIONAMENTO */
CREATE DATABASE AULA44;
USE AULA44;

CREATE TABLE CURSOS (
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30),
	HORAS INT,
	VALOR FLOAT (10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY (ID_PREREQ) REFERENCES CURSOS (IDCURSO);

INSERT INTO CURSOS VALUES (NULL, 'BD RELACIONAL', 20, 400.00, NULL); 
INSERT INTO CURSOS VALUES (NULL, 'BUSINESS INTELIGENGE', 40, 800.00, 1);
INSERT INTO CURSOS VALUES (NULL, 'RELATORIOS AVANCADOS', 20, 600.00, 2);
INSERT INTO CURSOS VALUES (NULL, 'LOGICA PROGRAM', 20, 400.00, NULL);
INSERT INTO CURSOS VALUES (NULL, 'RUBY', 30, 500.00, 4);

SELECT * FROM CURSOS;

SELECT NOME, VALOR, HORAS, IFNULL(ID_PREREQ, 'SEM REQ') REQUISITO
FROM CURSOS; 

SELECT 
C.NOME AS CURSO, 
C.VALOR AS VALOR, 
C.HORAS AS CARGA, 
IFNULL (P.NOME, "---") AS PREREQ
FROM CURSOS C LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;
